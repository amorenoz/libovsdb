package main

import (
	"fmt"
	"strings"
	"text/template"
	"unicode"

	"github.com/ovn-org/libovsdb"
)

const TABLE_TEMPLATE = `
// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package {{ .PackageName }}

// {{ .StructName }} defines an object in {{ .TableName }} table
type {{ .StructName }} struct {
    {{ range .Fields }} {{ .Name }}  {{ .Type }}   {{ .Tag }}
    {{ end }}
}

// Table returns the table name. It's part of the Model interface
func (*{{ .StructName }}) Table() string {
	return "{{ .TableName }}"
}
`

// TableTemplateData is the data needed for template processing
type TableTemplateData struct {
	TableName   string
	PackageName string
	StructName  string
	Fields      []Field
}

// Field represents the field information
type Field struct {
	Name string
	Type string
	Tag  string
}

// NewTableGenerator returns a table code generator
func NewTableGenerator(pkg string, name string, table *libovsdb.TableSchema) Generator {
	templateData := TableTemplateData{
		TableName:   name,
		PackageName: pkg,
		StructName:  StructName(name),
		Fields:      []Field{},
	}
	// First, add UUID
	templateData.Fields = append(templateData.Fields,
		Field{
			Name: "UUID",
			Type: "string",
			Tag:  Tag("_uuid"),
		})

	for columnName, columnSchema := range table.Columns {
		templateData.Fields = append(templateData.Fields, Field{
			Name: FieldName(columnName),
			Type: FieldType(columnSchema),
			Tag:  Tag(columnName),
		})
	}

	tableTemplate := template.Must(template.New(name).Parse(TABLE_TEMPLATE))
	return newGenerator(FileName(name), tableTemplate, templateData)
}

// FieldName returns the name of a column field
func FieldName(column string) string {
	return camelCase(column)
}

// StructName returns the name of the table struct
func StructName(tableName string) string {
	return strings.ReplaceAll(tableName, "_", "")
}

// FieldType returns the string representation of a column type
func FieldType(column *libovsdb.ColumnSchema) string {
	switch column.Type {
	case libovsdb.TypeEnum:
		return AtomicType(column.TypeObj.Key.Type)
	case libovsdb.TypeMap:
		return fmt.Sprintf("map[%s]%s", AtomicType(column.TypeObj.Key.Type),
			AtomicType(column.TypeObj.Value.Type))
	case libovsdb.TypeSet:
		return fmt.Sprintf("[]%s", AtomicType(column.TypeObj.Key.Type))
	default:
		return AtomicType(column.Type)
	}
}

// BasicType returns the string type of an AtomicType
func AtomicType(atype string) string {
	switch atype {
	case libovsdb.TypeInteger:
		return "int"
	case libovsdb.TypeReal:
		return "float64"
	case libovsdb.TypeBoolean:
		return "bool"
	case libovsdb.TypeString:
		return "string"
	case libovsdb.TypeUUID:
		return "string"
	}
	return ""
}

// Tag returns the Tag string of a column
func Tag(column string) string {
	return fmt.Sprintf("`ovs:\"%s\"`", column)
}

// Filename returns the filename of a table
func FileName(table string) string {
	return fmt.Sprintf("%s.go", strings.ToLower(table))
}

func camelCase(field string) string {
	capNext := true
	orig := []rune(field)
	for i, c := range orig {
		if capNext {
			orig[i] = unicode.ToUpper(c)
		}
		capNext = c == '_' || c == '-'
	}
	return strings.ReplaceAll(string(orig), "_", "")
}
